header :id => "headlines", :class => "headlines-event" do
  div :class => "main" do
    div :class => "line1" do
      h1 editable(page, :title), :class => "title"
      a "> " + t(:tickets), :class => "registration"
    end
    div :class => "line2 open-close" do
      div :class => "open" do
        div editable page, :content, :type => "wysihtml5"
        div t(:close), :class => "close-trigger"
      end
      div :class => "closed open-trigger" do
        div t :information_programm
      end
    end    
    div :class => "line3" do
      ul do
        page.downloads.each do |download|        
          li do
            a download.description, :href => download.attachment.url
          end
        end
      end
    end          
  end
end


if params[:start_date]
  start_date = Date.parse(params[:start_date])
else 
  start_date = Date.today
end

para :class => "admin-only admin-nav" do
  a "<" + t(:previous_week), :href => (url_for :controller => 'pages', :action => 'show', :id => 'programm', :start_date => (start_date - 1.week).to_s)
  a t(:next_week) + ">", :href => (url_for :controller => 'pages', :action => 'show', :id => 'programm', :start_date => (start_date + 1.week).to_s)
end

# load events of types 1, 7, 8 or 9 that have a start_date earlier than the end of this month and an end_date later than the start of this month
events = Event.joins(:type, :event_details).where('(event_types.id = 1 OR event_types.id = 7 OR event_types.id = 8 OR event_types.id = 9) AND event_details.start_date <= ? AND event_details.end_date >= ?', start_date.end_of_month, start_date)

# make a list of all occurences
all_occurences = []
events.each do |event|
  event.event_details.each do |detail|
      
    # get occurrences
    occurrences = detail.occurrences
          
    if occurrences.length > 0
      occurrences.each do |oc|
        all_occurences << { :time => oc, :event => event, :detail => detail }
      end
    end 
  end
end

# display list of all occurences
ol :class => "event-calendar" do
  # TODO: find out why there are dublicate entries in all_occurences which need to be uniqed 
  all_occurences.uniq.sort_by { |o| o[:time] }.each do |o|
    event = o[:event]
    time = o[:time]
    detail = o[:detail]


    li :class => "row event event-programm" do
      div :class => "basic" do   
        div :class => "content" do
          a :href => "events/"+ event.id.to_s do # TODO: fix URL generation
            h2 event.title, :class => "title"
            h3 event.type.name, :class =>"type"
            para event.people.map { |p| p.name }.join(', ').html_safe, :class => "teacher"
          end
        end
      end

      div :class => "details" do
        div :class => "content" do

          time(:class => "time") do
            span l(time, :format => :day_month), :class => "day"
            span l(time, :format => :hours_minutes), :class => "clock"
          end

          div :class => "address" do
            div detail.studio.location.name, :class => "location"
            div detail.studio.name, :class => "studio"
          end
        end    
      end
    end  
  end
end
